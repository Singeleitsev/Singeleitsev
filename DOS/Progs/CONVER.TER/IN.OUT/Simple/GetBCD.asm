INCLUDE dos.inc
;*****************************************************************************
;Макрос посимвольного ввода десятичного числа
;и преобразования его в неупакованное BCD-число
;*****************************************************************************
;ВХОД: имя переменной, куда будет помещено BCD-представление
;введенного числа и размерность этого числа в байтах
;ВЫХОД: значение указанной переменной в памяти
;порядок следования байт - младший байт по младшему адресу (Intel)
;*****************************************************************************
GetBCD MACRO _var, _len
local get1
	push	ax		;store registers
	push	bx
	push	cx
        xor     ax, ax
        mov     ah, 1h		;1h int 21h (ввод 1 символа с консоли с эхом)
        mov     bx, _len
        dec	bx
        mov     cx, _len		;столько раз повторим цикл
get1:
        int     21h             ;получаем символ (в al)
        sub     al, 30h         ;преобразуем в BCD
        mov     _var[bx],al	;отправляем по адресу
        dec     bx              ;прибавляем адрес
        loop    get1
	pop	cx		;store registers
	pop	bx
	pop	ax
        ENDM
;*****************************************************************************
;Макрос непосредственного вывода на экран ASCII-представления
;заданного неупакованного BCD-числа
;(без пробела, перехода на следующую строку и возврата каретки).
;!!!Сама переменная при этом никаких изменений не претерпевает,
;то есть ей можно будет оперировать в дальнейшем по ходу программы!!!
;*****************************************************************************
;Вход: переменная, содержащая неупакованное BCD-число, и ее размерность.
;Выход: ASCII-представление значения заданной переменной на экране
;*****************************************************************************
PutBCD	MACRO _var, _len
local M1
	push	ax		;store registers
	push	dx
	push	cx
	push	si
	mov	ah, 2h		;int 21h func 2h
	mov	si, _len
	dec	si
	mov	cx, _len
M1:
	mov	dl, _var[si]
	add	dl, 30h		;convert to ASCII
	int	21h
	dec	si
	loop	M1
	pop	si		;restore registers
	pop	cx
	pop	dx
	pop	ax
	ENDM
;*****************************************************************************
.model small
.stack 256
.data
mes_1   db      10, 13, 'Enter 8 characters: $'
mes_2	db	10, 13, 'You entered: $'
num     db      8 dup (0)
num_len	equ	$-num
.code
main	proc
	mov	ax, @data
	mov	ds, ax

@DispStr mes_1
GetBCD num, num_len
@DispStr mes_2
PutBCD num, num_len
	
exit:
	mov	ax, 4c00h
	int	21h
main	endp
end	main